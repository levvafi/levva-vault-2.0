// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import {Test} from "lib/forge-std/src/Test.sol";
import {console} from "lib/forge-std/src/console.sol";
import {Vm} from "lib/forge-std/src/Vm.sol";
import {IEulerOracleRouter} from "./IEulerOracleRouter.t.sol";
import {IEulerOracleRouterFactory} from "./IEulerOracleRouterFactory.t.sol";
import {FixedRateOracle} from "euler-price-oracle/adapter/fixed/FixedRateOracle.sol";
import {PendleUniversalOracle} from "euler-price-oracle/adapter/pendle/PendleUniversalOracle.sol";
import {CrossAdapter} from "euler-price-oracle/adapter/CrossAdapter.sol";
import {CurveEMAOracle} from "euler-price-oracle/adapter/curve/CurveEMAOracle.sol";
import {LevvaVault} from "contracts/LevvaVault.sol";
import {WithdrawalQueue} from "contracts/WithdrawalQueue.sol";
import {LevvaVaultFactory} from "contracts/LevvaVaultFactory.sol";
import {ERC1967Proxy} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
import {AaveAdapter} from "contracts/adapters/aave/AaveAdapter.sol";
import {PendleAdapter} from "contracts/adapters/pendle/PendleAdapter.sol";
import {LevvaVaultAdapter} from "contracts/adapters/levvaVault/LevvaVaultAdapter.sol";
import {ResolvAdapter} from "contracts/adapters/resolv/ResolvAdapter.sol";
import {ERC4626AdapterBase} from "contracts/adapters/ERC4626AdapterBase.sol";
import {LevvaPoolAdapter} from "contracts/adapters/levvaPool/LevvaPoolAdapter.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {AdapterActionExecutor} from "contracts/base/AdapterActionExecutor.sol";
import {IPSwapAggregator, SwapDataExtra} from "@pendle/core-v2/router/swap-aggregator/IPSwapAggregator.sol";
import {
    TokenInput,
    ApproxParams,
    LimitOrderData,
    SwapData,
    TokenOutput,
    SwapType
} from "@pendle/core-v2/interfaces/IPAllActionTypeV3.sol";

contract UltraSafeVaultTest is Test {
    uint256 public constant FORK_BLOCK = 22667444;
    string private mainnetRpcUrl = vm.envString("ETH_RPC_URL");

    address private EULER_ORACLE_ROUTER_FACTORY = 0x70B3f6F61b7Bf237DF04589DdAA842121072326A;
    address private PENDLE_ORACLE = 0x9a9Fa8338dd5E5B2188006f1Cd2Ef26d921650C2;

    /*  USDC Vault
        Stake USDC in Aave                                   34 %
        Buy sUSDe for USDC, stake sUSDe to Pendle pool      16.5%
        Buy/get sUSDe for USDC, stake sUSDe to Levva vault  16.5%
        Buy/get wstUSR, stake wstUSR to Pendle pool         16.5%
        Buy/get wstUSR, stake wstUSR to Levva vault         16.5%
    */

    address private USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address private aUSDC = 0x98C23E9d8f34FEFb1B7BD6a91B7FF122F4e16F5c;
    address private PENDLE_MARKET_sUSDE_25sep2025 = 0xA36b60A14A1A5247912584768C6e53E1a269a9F7;
    address private PENDLE_MARKET_wstUSR_25sep2025 = 0x09fA04Aac9c6d1c6131352EE950CD67ecC6d4fB9;
    address private sUSDE = 0x9D39A5DE30e57443BfF2A8307A4256c8797A3497;
    address private USDE = 0x4c9EDD5852cd905f086C759E8383e09bff1E68B3;
    address private wstUSR = 0x1202F5C7b4B9E47a1A484E8B270be34dbbC75055;
    address private USR = 0x66a1E37c9b0eAddca17d3662D6c05F4DECf3e110;

    address private USD = 0x0000000000000000000000000000000000000348;
    address private USDE_USD_oracle = 0x8211B9ae40b06d3Db0215E520F232184Af355378; // Chainlink
    address private USDC_USD_oracle = 0x6213f24332D35519039f2afa7e3BffE105a37d3F; // Chainlink
    address private sUSDE_USD_oracle = 0xD4fF9D4e0A3E5995A0E040632F34271b2e9c8a42; // Chainlink

    IEulerOracleRouter oracle;
    LevvaVaultFactory levvaVaultFactory;
    LevvaVault levvaVault;

    LevvaVault levvaVault_sUSDE;
    LevvaVault levvaVault_wstUSR;

    //USER
    address OWNER = makeAddr("OWNER");
    address VAULT_MANAGER = makeAddr("VAULT_MANAGER");
    address USER = makeAddr("USER");

    function setUp() public {
        vm.createSelectFork(vm.rpcUrl(mainnetRpcUrl), FORK_BLOCK);

        startHoax(OWNER);
        _prepareEulerOracleRouter(OWNER);
        _prepareLevvaVault(address(oracle));
        _configureAdapters();
        _configureTrackedAssets();
        _configureUser();
        vm.stopPrank();
    }

    function _prepareEulerOracleRouter(address owner) private {
        address routerAddress = IEulerOracleRouterFactory(EULER_ORACLE_ROUTER_FACTORY).deploy(owner);
        IEulerOracleRouter router = IEulerOracleRouter(routerAddress);
        oracle = router;

        //aUSDC/USDC oracle
        FixedRateOracle aUSDC_USDC_oracle = new FixedRateOracle(aUSDC, USDC, 1e6);
        router.govSetConfig(aUSDC, USDC, address(aUSDC_USDC_oracle));

        //PENDLE-Market-sUSDe-25Sep2025 / USDE oracle
        PendleUniversalOracle pMarket_sUSDE_USDE_oracle = new PendleUniversalOracle(
            PENDLE_ORACLE,
            PENDLE_MARKET_sUSDE_25sep2025, // pendle market
            PENDLE_MARKET_sUSDE_25sep2025, // base token
            USDE, // quote token
            5 minutes // twap window
        );

        CrossAdapter USDC_USDE_oracle = new CrossAdapter(USDE, USD, USDC, USDE_USD_oracle, USDC_USD_oracle);

        CrossAdapter pMarket_sUSDe_USDC_oracle = new CrossAdapter(
            PENDLE_MARKET_sUSDE_25sep2025, USDE, USDC, address(pMarket_sUSDE_USDE_oracle), address(USDC_USDE_oracle)
        );

        router.govSetConfig(PENDLE_MARKET_sUSDE_25sep2025, USDC, address(pMarket_sUSDe_USDC_oracle));
        console.log("LP_sUSDE_25sep2025/USDC: ", router.getQuote(1e18, PENDLE_MARKET_sUSDE_25sep2025, USDC));

        // //PENDLE-Market-wstUSR-25Sep2025
        PendleUniversalOracle pMarket_wstUSR_USR_oracle = new PendleUniversalOracle(
            PENDLE_ORACLE,
            PENDLE_MARKET_wstUSR_25sep2025, // pendle market
            PENDLE_MARKET_wstUSR_25sep2025, // base token
            USR, // quote token
            5 minutes // twap window
        );

        CurveEMAOracle USR_USDC_oracle = new CurveEMAOracle(
            0x3eE841F47947FEFbE510366E4bbb49e145484195, // curve pool USR/USDC
            USDC, // base, coins(0) - quote
            0 // curve parameter type(uint256).max for price_oracle(), and index for price_oracle(priceOracleIndex)
        );
        CrossAdapter pMarket_wstUSR_USDC_oracle = new CrossAdapter(
            PENDLE_MARKET_wstUSR_25sep2025, USR, USDC, address(pMarket_wstUSR_USR_oracle), address(USR_USDC_oracle)
        );

        router.govSetConfig(PENDLE_MARKET_wstUSR_25sep2025, USDC, address(pMarket_wstUSR_USDC_oracle));
        console.log("LP_wstUSR_25sep2025/USDC: ", router.getQuote(1e18, PENDLE_MARKET_wstUSR_25sep2025, USDC));

        //sUSDE/USDC for vault lvva-sUSDE
        CrossAdapter USDC_sUSDE_oracle = new CrossAdapter(sUSDE, USD, USDC, sUSDE_USD_oracle, USDC_USD_oracle);
        router.govSetConfig(sUSDE, USDC, address(USDC_sUSDE_oracle));
        console.log("sUSDE/USDC: ", router.getQuote(1e18, sUSDE, USDC));

        //wstUSR/USDC for vault lvva-wstUSR
        router.govSetResolvedVault(wstUSR, true); //wstUSR / USR
        CrossAdapter USDC_wstUSR_oracle = new CrossAdapter(wstUSR, USR, USDC, address(router), address(USR_USDC_oracle));
        router.govSetConfig(wstUSR, USDC, address(USDC_wstUSR_oracle));
        console.log("wstUSR/USDC: ", router.getQuote(1e18, wstUSR, USDC));
    }

    function _prepareLevvaVault(address _oracle) private {
        address levvaVaultImplementation = address(new LevvaVault());
        address withdrawalQueueImplementation = address(new WithdrawalQueue());
        address levvaVaultFactoryImplementation = address(new LevvaVaultFactory());

        bytes memory data = abi.encodeWithSelector(
            LevvaVaultFactory.initialize.selector, levvaVaultImplementation, withdrawalQueueImplementation
        );
        ERC1967Proxy levvaVaultFactoryProxy = new ERC1967Proxy(levvaVaultFactoryImplementation, data);
        levvaVaultFactory = LevvaVaultFactory(address(levvaVaultFactoryProxy));

        (address deployedVault,) = levvaVaultFactory.deployVault(
            address(USDC),
            "Levva USDC Vault",
            "LEVVA-USDC-1",
            "Levva USDC Vault Withdrawal Queue",
            "LEVVA-USDC-1-WITHDRAWAL-QUEUE",
            address(0xFEE),
            address(_oracle)
        );
        levvaVault = LevvaVault(deployedVault);

        levvaVault.addVaultManager(VAULT_MANAGER, true);
        levvaVault.setMaxSlippage(200_000); // 20%
        levvaVault.setManagementFeeIR(100_000); //10%
        levvaVault.setPerformanceFeeRatio(100_000); // 10%

        console.log("LevvaVault", address(levvaVault));
    }

    function _addAaveAdapter() private {
        address AAVE_ADDRESS_POOL_PROVIDER = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;
        AaveAdapter aaveAdapter = new AaveAdapter(AAVE_ADDRESS_POOL_PROVIDER);
        levvaVault.addAdapter(address(aaveAdapter));
    }

    function _addPendleAdapter() private {
        address PENDLE_ROUTER = 0x888888888889758F76e7103c6CbF23ABbF58F946;
        PendleAdapter pendleAdapter = new PendleAdapter(PENDLE_ROUTER);
        levvaVault.addAdapter(address(pendleAdapter));
    }

    function _addLevvaVaultAdapter() private {
        LevvaVaultAdapter levvaVaultAdapter = new LevvaVaultAdapter(address(levvaVaultFactory));
        levvaVault.addAdapter(address(levvaVaultAdapter));

        // levvaVault sUSDE
        {
            (address deployedVault,) = levvaVaultFactory.deployVault(
                address(sUSDE),
                "Levva sUSDE Vault",
                "LEVVA-sUSDE-1",
                "Levva sUSDE Vault Withdrawal Queue",
                "LEVVA-sUSDE-1-WITHDRAWAL-QUEUE",
                address(0xFEE),
                address(oracle)
            );
            levvaVault_sUSDE = LevvaVault(deployedVault);

            LevvaPoolAdapter levvaPoolAdapter = new LevvaPoolAdapter(address(levvaVault_sUSDE));
            levvaVault_sUSDE.addAdapter(address(levvaPoolAdapter));

            oracle.govSetResolvedVault(address(levvaVault_sUSDE), true);
        }

        // levvaVault wstUSR
        {
            (address deployedVault,) = levvaVaultFactory.deployVault(
                address(wstUSR),
                "Levva wstUSR Vault",
                "LEVVA-wstUSR-1",
                "Levva wstUSR Vault Withdrawal Queue",
                "LEVVA-wstUSR-1-WITHDRAWAL-QUEUE",
                address(0xFEE),
                address(oracle)
            );
            levvaVault_wstUSR = LevvaVault(deployedVault);

            LevvaPoolAdapter levvaPoolAdapter = new LevvaPoolAdapter(address(levvaVault_wstUSR));
            levvaVault_wstUSR.addAdapter(address(levvaPoolAdapter));

            oracle.govSetResolvedVault(address(levvaVault_wstUSR), true);
        }
    }

    function _addResolvAdapter() private {
        ResolvAdapter resolvAdapter = new ResolvAdapter(wstUSR);
        levvaVault.addAdapter(address(resolvAdapter));
    }

    function _configureAdapters() private {
        _addAaveAdapter();
        _addPendleAdapter();
        _addLevvaVaultAdapter();
        _addResolvAdapter();
    }

    function _configureUser() private {
        uint256 initialBalance = 10_000_000 * 1e6;
        vm.deal(USER, 1 ether);
        deal(USDC, USER, initialBalance);
    }

    function _configureTrackedAssets() private {
        levvaVault.addTrackedAsset(aUSDC);
        levvaVault.addTrackedAsset(PENDLE_MARKET_sUSDE_25sep2025);
        levvaVault.addTrackedAsset(PENDLE_MARKET_wstUSR_25sep2025);
        levvaVault.addTrackedAsset(address(levvaVault_sUSDE));
        levvaVault.addTrackedAsset(address(levvaVault_wstUSR));
    }

    function _showAssets() private view {
        console.log("Assets:");
        console.log("   USDC", IERC20(USDC).balanceOf(address(levvaVault)));
        console.log("   aUSDC", IERC20(aUSDC).balanceOf(address(levvaVault)));
        console.log("   LP-sUSDE-25Sep2025", IERC20(PENDLE_MARKET_sUSDE_25sep2025).balanceOf(address(levvaVault)));
        console.log("   LP-wstUSR-25Sep2025", IERC20(PENDLE_MARKET_wstUSR_25sep2025).balanceOf(address(levvaVault)));
        console.log("   LEVVA-sUSDE-1", IERC20(levvaVault_sUSDE).balanceOf(address(levvaVault)));
        console.log("   LEVVA-wstUSR-1", IERC20(levvaVault_wstUSR).balanceOf(address(levvaVault)));
        console.log("   #TotalAssets", levvaVault.totalAssets());
        console.log("   #LP price:", levvaVault.convertToAssets(1e6));
    }

    function _depositToAave(uint256 depositAmount) private {
        vm.startSnapshotGas("rebalance: AaveAdapter.supply");

        AdapterActionExecutor.AdapterActionArg[] memory args = new AdapterActionExecutor.AdapterActionArg[](1);
        args[0] = AdapterActionExecutor.AdapterActionArg({
            actionSlippage: 0,
            adapterId: bytes4(keccak256("AaveAdapter")),
            data: abi.encodeWithSelector(AaveAdapter.supply.selector, address(USDC), depositAmount)
        });

        levvaVault.executeAdapterAction(args);
        vm.stopSnapshotGas();
    }

    function _depositToPendle_LP_sUSDE(uint256 usdcAmount) private {
        vm.startSnapshotGas("rebalance: PendleAdapter.addLiquiditySingleToken LP-sUSDE-25Sep2025");
        ApproxParams memory approxParams =
            ApproxParams({guessMin: 0, guessMax: type(uint256).max, guessOffchain: 0, maxIteration: 256, eps: 1e14});

        SwapData memory swapData = SwapData({
            swapType: SwapType(4),
            extRouter: 0x6088d94C5a40CEcd3ae2D4e0710cA687b91c61d0,
            extCalldata: hex"03b87e5f000000000000000000000000000000000000000000000000000000000001a663000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000000000266ac43200000000000000000000000000000000000000000000001d6232f2188bec2b1bc0000000000000000000000000000000000000000000000000000000006846f7f70000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000266ac43200000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ade1e3b40b58e51df923cfbffcfb3502a5b07d1a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ade1e3b40b58e51df923cfbffcfb3502a5b07d1a0000000000000000000000000000000000000000000000000000000000000001000000000000000000002710dcef968d416a41cdac0ed8702fac8128a64241a20000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000853d955acef822db058eb8505911ed77f175b99e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000853d955acef822db058eb8505911ed77f175b99e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ecd7eef15713997528896cb5db7ec316db4c21010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ecd7eef15713997528896cb5db7ec316db4c21010000000000000000000000000000000000000000000000000000000000000001000000000000000000002710ce6431d21e3fb1036ce9973a3312368ed96f5ce70000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000853d955acef822db058eb8505911ed77f175b99e00000000000000000000000083f20f44975d03b1b09e64809b757c47f942beea00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000083f20f44975d03b1b09e64809b757c47f942beea0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ecd7eef15713997528896cb5db7ec316db4c21010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ecd7eef15713997528896cb5db7ec316db4c21010000000000000000000000000000000000000000000000000000000000000001000000000000000000002710167478921b907422f8e88b43c4af2b8bea278d3a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000083f20f44975d03b1b09e64809b757c47f942beea0000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            needScale: true
        });

        TokenInput memory tokenInput = TokenInput({
            tokenIn: USDC,
            netTokenIn: usdcAmount,
            tokenMintSy: 0x9D39A5DE30e57443BfF2A8307A4256c8797A3497,
            pendleSwap: 0xFE6228A3866426e96611ED7A3D0Dee918244fcB3,
            swapData: swapData
        });

        AdapterActionExecutor.AdapterActionArg[] memory args = new AdapterActionExecutor.AdapterActionArg[](1);
        args[0] = AdapterActionExecutor.AdapterActionArg({
            actionSlippage: 50_000, // 5%
            adapterId: bytes4(keccak256("PendleAdapter")),
            data: abi.encodeWithSelector(
                PendleAdapter.addLiquiditySingleToken.selector, PENDLE_MARKET_sUSDE_25sep2025, approxParams, tokenInput, 0
            )
        });
        levvaVault.executeAdapterAction(args);
        vm.stopSnapshotGas();
    }

    function _depositToPendle_LP_wstUSR(uint256 usdcAmount) private {
        vm.startSnapshotGas("rebalance: PendleAdapter.addLiquiditySingleToken LP-wstUSR-25Sep2025");
        ApproxParams memory approxParams = ApproxParams({
            guessMin: 11005550409949062949108,
            guessMax: 33016651229847188847324,
            guessOffchain: 22011100819898125898216,
            maxIteration: 30,
            eps: 1e14
        });
        // ApproxParams memory approxParams =
        //     ApproxParams({guessMin: 0, guessMax: type(uint256).max, guessOffchain: 0, maxIteration: 256, eps: 1e14});

        SwapData memory swapData = SwapData({
            swapType: SwapType(1),
            extRouter: 0x6131B5fae19EA4f9D964eAc0408E4408b66337b5,
            extCalldata: hex"e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e110000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004088e563110000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000c6fdfc08401113d02280e27f53f4f38a19fbccc9000000000000000000000000000000000000000000000000000000266ac43200000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e1100000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec600000000000000000000000000000000000000000000000000000000000000200000000000000000024a1c98d59d61d800000000000022ef5adb1180b63d03e8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e110000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000266ac43200000000000000000000000000000000000000000000001f7104f85c8d70d083840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000266ac4320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002897b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223136353138302e313731323632383836222c22416d6f756e744f7574555344223a223136353138382e3030393939353539393136222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313634393735373739303936393132333434313837383830222c2254696d657374616d70223a313734393437333339382c22526f7574654944223a2230666166616638622d343732302d343363632d616461372d3063333061663930306332613a32383361303732372d666433382d343635362d393233352d346161386136663431393731222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224e6f3149624a32513465376c65356171765a2f3657304c634c464a325a51344945335a4d793854506175442f6e47442f3962636b683248443347324a696651693658595374436165384e39503768696c4248486a6d30743170634a3531714e344b546b59413037316a6749384f6b355946777a6b76474930712b2f686a595047696459314b78676a324267665732414f7a38795a7459376d6a57676a45332b6d696867555448664473592b435841507570537a2f486f6e6f7a346e6b4869513147505a73614f31442b4a7850474c376f3434613145454a555a2b48645967724e6231544a6239515a37777976636d4255683153487a44575873566148432f38306e514f6f6e4d6d4c3357764d6d74426561614534706c727550314a526b56657a6b425667564d2b536b446447762b45636c4b583661447555314a655575627745716b78444f586d6666456458636a6c6a304f6a3730773d3d227d7d0000000000000000000000000000000000000000000000",
            needScale: false
        });

        TokenInput memory tokenInput = TokenInput({
            tokenIn: USDC,
            netTokenIn: usdcAmount,
            tokenMintSy: 0x66a1E37c9b0eAddca17d3662D6c05F4DECf3e110,
            pendleSwap: 0xFE6228A3866426e96611ED7A3D0Dee918244fcB3,
            swapData: swapData
        });

        AdapterActionExecutor.AdapterActionArg[] memory args = new AdapterActionExecutor.AdapterActionArg[](1);
        args[0] = AdapterActionExecutor.AdapterActionArg({
            actionSlippage: 100_000, // 10%
            adapterId: bytes4(keccak256("PendleAdapter")),
            data: abi.encodeWithSelector(
                PendleAdapter.addLiquiditySingleToken.selector, PENDLE_MARKET_wstUSR_25sep2025, approxParams, tokenInput, 0
            )
        });
        levvaVault.executeAdapterAction(args);
        vm.stopSnapshotGas();
    }

    function _depositToLevvaVault_sUSDE(uint256 usdcAmount) private {
        vm.startSnapshotGas(
            "rebalance: PendleAdapter.swapTokenToToken, LevvaVaultAdapter.depositAllExcept LevvaVault-sUSDE-1"
        );

        IPSwapAggregator pendleSwap = IPSwapAggregator(0xd4e9B0d466789d7F6201442eecCBA6a75A552db0);
        SwapData memory swap = SwapData({
            swapType: SwapType(4),
            extRouter: 0x6088d94C5a40CEcd3ae2D4e0710cA687b91c61d0,
            extCalldata: hex"03b87e5f000000000000000000000000000000000000000000000000000000000001a663000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000000000266ac43200000000000000000000000000000000000000000000001ab6500686179d503c20000000000000000000000000000000000000000000000000000000006846eaf70000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000266ac432000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000016623c35ef61d92aaaf98f25bd64ea962fbd6a12000000000000000000000000000000000000000000000000000000000000000100000000000000000000000016623c35ef61d92aaaf98f25bd64ea962fbd6a1200000000000000000000000000000000000000000000000000000000000000010000000000000000000027100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000097a7f8be1364759266cc5a619772458cc126b612000000000000000000000000000000000000000000000000000000000000000100000000000000000000000097a7f8be1364759266cc5a619772458cc126b61200000000000000000000000000000000000000000000000000000000000000018000000000000000000027101dd125c32e4b5086c63cc13b3ca02c4a2a61fa9b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000000000000000000000000000000000000000000000",
            needScale: false
        });

        SwapDataExtra memory swapDataExtra =
            SwapDataExtra({tokenIn: address(USDC), tokenOut: sUSDE, minOut: 0, swapData: swap});

        AdapterActionExecutor.AdapterActionArg[] memory args = new AdapterActionExecutor.AdapterActionArg[](2);
        args[0] = AdapterActionExecutor.AdapterActionArg({
            actionSlippage: 50_000, // 5%
            adapterId: bytes4(keccak256("PendleAdapter")),
            data: abi.encodeWithSelector(PendleAdapter.swapTokenToToken.selector, pendleSwap, swapDataExtra, usdcAmount)
        });
        args[1] = AdapterActionExecutor.AdapterActionArg({
            actionSlippage: 50_000, // 10%
            adapterId: bytes4(keccak256("LevvaVaultAdapter")),
            data: abi.encodeWithSelector(LevvaVaultAdapter.depositAllExcept.selector, address(levvaVault_sUSDE), 0)
        });
        levvaVault.executeAdapterAction(args);
        vm.stopSnapshotGas();
    }

    //swap USDC to USR, stake USR to wstUSR, deposit wstUSR into levva-wstUSR-1
    function _depositToLevvaVault_wstUSR(uint256 usdcAmount) private {
        vm.startSnapshotGas(
            "rebalance:PendleAdapter.swapTokenToToken, ResolvAdapter.depositAllExcept, LevvaVaultAdapter.depositAllExcept to LevvaVault-wstUSR-1"
        );

        IPSwapAggregator pendleSwap = IPSwapAggregator(0xd4e9B0d466789d7F6201442eecCBA6a75A552db0);
        SwapData memory swap = SwapData({
            swapType: SwapType(1),
            extRouter: 0x6131B5fae19EA4f9D964eAc0408E4408b66337b5,
            extCalldata: hex"e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000076000000000000000000000000000000000000000000000000000000000000009a000000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e110000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000408bf36a3b0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000004444c5dc75cb358380d2e3de08a90000000000000000000000000000000000000000000000000000000099ab10c80000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e1100000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d250000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000008bb9cd887dd51c5aa8d7da9e244c94bec035e47c000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e11000000000000000000000000000000000000000000000000000000001270b0180000000000000000000000000fff6fbe64b68d618d47c209fe40b0d8ee6e23c90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004088e563110000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000c6fdfc08401113d02280e27f53f4f38a19fbccc90000000000000000000000000000000000000000000000000000001ba9082400000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e1100000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec600000000000000000000000000000000000000000000000000000000000000200000000000000000024a2af74ba8defc00000000000022f0361bee398485e3de000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e110000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000266ac43200000000000000000000000000000000000000000000002296c4ed923e0fff6e630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000266ac43200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028b7b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223136353538362e3732333835343833343136222c22416d6f756e744f7574555344223a223136353030352e3238333831333331383335222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313634393931353737393637303931343532383633343534222c2254696d657374616d70223a313734393437373337322c22526f7574654944223a2239356561323037382d633339652d343334652d393965632d3266353962626535346563623a38306263343734312d386562632d343664372d383265302d356435393862343731666563222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22486d367744456775575379414a334b2b37426457426361784337353274305374667649644b797758694276784d4c45794645577a6a6b444e6b4f626a6a566d322b4c4637624a372b4169714678706c5473586b2b2f5239585a73334b6843537254787635584551456f2b6e624c6c4b76704f50506b51347634776f327a2b477752372b55577a4d57632b39304731667553472f4e6b3032654878566d777368354c707351502b626d7445656d5057793656396a7354537964526a4e466e6b77486b666a3173396737577668355635755846364d65574651586d76727266713733303742416836507a7a47434b6e4f7476546e5553322f6747716270744c4367484a45614b376d4c6a47554a774d4f426a7a782b4f4b54575356774e442f476e7330674d77524c6f363361785766706f49657a6659347275596c6d6a61316146455248533956506d64426f74656874767675336b7762413d3d227d7d000000000000000000000000000000000000000000",
            needScale: false
        });

        SwapDataExtra memory swapDataExtra =
            SwapDataExtra({tokenIn: address(USDC), tokenOut: USR, minOut: 0, swapData: swap});

        AdapterActionExecutor.AdapterActionArg[] memory args = new AdapterActionExecutor.AdapterActionArg[](3);
        args[0] = AdapterActionExecutor.AdapterActionArg({
            actionSlippage: 50_000, // 5%
            adapterId: bytes4(keccak256("PendleAdapter")),
            data: abi.encodeWithSelector(PendleAdapter.swapTokenToToken.selector, pendleSwap, swapDataExtra, usdcAmount)
        });
        args[1] = AdapterActionExecutor.AdapterActionArg({
            actionSlippage: 50_000, // 5%
            adapterId: bytes4(keccak256("ResolvAdapter")),
            data: abi.encodeWithSelector(ERC4626AdapterBase.depositAllExcept.selector, 0)
        });
        args[2] = AdapterActionExecutor.AdapterActionArg({
            actionSlippage: 50_000, // 5%
            adapterId: bytes4(keccak256("LevvaVaultAdapter")),
            data: abi.encodeWithSelector(LevvaVaultAdapter.depositAllExcept.selector, address(levvaVault_wstUSR), 0)
        });
        levvaVault.executeAdapterAction(args);
        vm.stopSnapshotGas();
    }

    /*
        1) user deposits 1_000_000 USDC
        2) rebalance USDC to
            34%     Aave
            16.5 %  LP-sUSDe-25Sep2025
            16.5 %  LP-wstUSR-25Sep2025
            16.5 %  LevvaVault sUSDe
            16.5 %  LevvaVault wstUSR
        3) check lp price
    */
    function test_scenario() public {
        uint256 depositAmount = 1_000_000 * 1e6;

        vm.startPrank(USER);
        IERC20(USDC).approve(address(levvaVault), depositAmount);
        levvaVault.deposit(depositAmount, USER);
        vm.stopPrank();

        uint256 initialBalance = IERC20(USDC).balanceOf(address(levvaVault));
        uint256 usdcToAave = initialBalance * 34 / 100;
        uint256 usdcToPendleLp = initialBalance * 165 / 1000;

        // rebalance
        startHoax(VAULT_MANAGER);
        _depositToAave(usdcToAave); //34% to Aave
        _depositToPendle_LP_sUSDE(usdcToPendleLp); //16.5% to LP-sUSDe-25Sep2025
        _depositToPendle_LP_wstUSR(usdcToPendleLp); //16.5% to LP-wstUSR-25Sep2025
        _depositToLevvaVault_sUSDE(usdcToPendleLp); //16.5% to swap USDC to sUSDE, deposit to Levva-sUSDE-1
        _depositToLevvaVault_wstUSR(usdcToPendleLp); // 16.5 % swap USDC to wstUSR, deposit wstUSR to Levva-wstUSR-1
        vm.stopPrank();

        _showAssets();

        //deposit into initialized vault
        vm.startPrank(USER);
        IERC20(USDC).approve(address(levvaVault), 100e6);
        vm.startSnapshotGas("deposit");
        levvaVault.deposit(100e6, USER);
        console.log("Deposit gas cost:", vm.stopSnapshotGas(), "\n");

        // check requestRedeem gas cost
        uint256 sharesToRedeem = 50e6;
        vm.startSnapshotGas("requestRedeem");
        levvaVault.requestRedeem(sharesToRedeem);
        console.log("Request redeem gas cost:", vm.stopSnapshotGas(), "\n");
    }
}
